---
layout: post
title: 'Java - 1'
date: 2023-05-25 17:50:43 +0900
image: /java/java.jpg
tags: [java]
categories: JAVA
---

# JAVA 01

## HelloJava

```java
public class HelloJava {
	// 접근 권한 클래스 선언 클래스 이름
	public static void main(String[] args) {
// 접근권한 고정할당 리턴값x 메인 메소드선언 배열 매소드 인자
		System.out.println("처음입니다. 안녕하세요!");
		// System클래스의 변수, 메소드 호출, 컨텐츠 내용 줄바꿈 출력.
		// 클래스명, 변수, 메소드명(컨텐츠)
		System.out.println("헬로우 자바!!");
		int num;
		// 변수선언 num은 정수값을 가지는 변수이다.
		num = 10 + 20;	// 해당 계산식의 결과를 num에 대입
		if (num > 10) // 조건문, num의 값이 10보다 크면, 아래 내용 실행.
			System.out.println("10보다 큽니다.");	// num 값은 30.
		num = 0; // 0값을 num에 할당.
		while (num < 10) {
			System.out.println("헬로우 10"); // num 값은 0, 해당 내용 실행.
			num = num + 1; // num값에 1 더하기 적용.
		}
	}	// 메인 메소드의 끝
}// 클래스의 끝
```

<br/>
<br/>
## printf (print formatted) 활용예제

```java
public class PrintF {
// printf 출력문 형식
// (1) 정해진 서식에 따라 문자열을 비롯한 여러 자료형을 출력
// (2)printf() 는 괄호() 안에 큰 따옴표 ("")로 모든 내용을 묶어 글자로 취급한다.
// (3) 중간에 다른 문자, 숫자 등의 값을 넣기 위해선 %c, %d 와 같은 지정 포맷으로 표시하며
// 그 대응 값을 입력한 포맷의 순서대로 큰 따옴표("") 우측에 콤마(,)로 구분하여 입력한다.
// (4) 또한 줄 바꿈 등의 동작은 역 슬래시(\, 원 표시)n 등의 특정 제어자를 이용한다.
// (\n, \t 등)
	public static void main(String[] args) {
		//모두 글자로 취급한다.
		System.out.printf("100 + 100 = "); 	// 문자열 출력
		// System.out.printf(); 는 행이 넘어가지 않으므로 강제로 행이 넘어가게 한다.
		System.out.printf("\n");	// 줄바꿈
		// 숫자와 계산해서 결과를 출력한다.
		System.out.printf("%d", 100 + 100);	// 정수형(int) 출력 서식
		// System.out.printf();는 행이 넘어가지 않으므로 강제로 행이 넘어가게 한다.
		System.out.printf("\n");	// 줄 바꿈
		System.out.printf("%f", 1.0 + 1);
	}
}
```

**`printf`** 함수는 여러 가지 형식 지정자(format specifier)를 사용하여 출력할 데이터를 지정할 수 있습니다. 형식 지정자는 **`%`** 기호와 함께 사용되며, 출력될 데이터의 유형과 형식을 지정합니다. 일반적인 형식 지정자로는 **`%d`**(정수), **`%f`**(부동 소수점 수), **`%c`**(문자), **`%s`**(문자열) 등이 있습니다.
<br/>
<br/>

## Do-While 문 예제

```java
public class Do_While {
public static void main(String[] args) {

	Scanner scan01 = new Scanner(System.in);
	int sum = 0, i = 0, average, category;
	char credit;
	boolean fail = false;

	do {
		System.out.println("점수를 입력하세요. ");
		sum += scan01.nextInt();
		i++;
	} while (i < 5);

	average = sum/5;
	category = average/10;

	switch (category) {

	case 10:
		credit = 'A';
		break;
	case 9:
		credit = 'A';
		break;
	case 8:
		credit = 'B';
		break;
	case 7:
		credit = 'C';
		break;
	case 6:
		credit = 'D';
		break;
	default :
		credit = 'E';
		break;
	}

	if (fail)
		System.out.println("한 과목 이상에서 40점 이하의 점수를 받았습니다. 과락입니다.");
	else
		System.out.printf("점수의 총 합계는 '%d'이며, 평균은 '%d' 입니다. 학점은 '%c' 입니다. \\n", sum, average, credit);

	System.out.println("계속 입력하시겠습니까? ");
	String YesOrNo = scan01.next();
    char yesno = Character.toLowerCase(YesOrNo.charAt(0));
	if(yesno == 'y') {
		main(args);  // y를 누르면 main 메서드 다시 반복
	} else if (yesno == 'n') {
		System.out.println("프로그램을 종료합니다. ");
	} else {
		System.out.println("잘못된 입력입니다. 프로그램을 종료합니다.");
	}

	}
}
```

**`do`** 키워드 뒤에 중괄호로 둘러싸인 코드 블록이 위치하며, 이 코드 블록은 반복적으로 실행됩니다. 그런 다음 **`while`** 키워드를 사용하여 반복 조건을 지정합니다. 조건이 참인 동안 코드 블록이 계속 반복 실행됩니다. 조건이 거짓이면 **`do-while`** 루프가 종료되고, 프로그램은 다음 명령문으로 이동합니다.

**`do-while`** 문의 특징은 조건 검사가 반복 실행 후에 이루어진다는 점입니다. 따라서 코드 블록은 최소한 한 번은 실행되며, 이후에 조건을 확인하여 추가적인 반복을 결정합니다.
<br/>
<br/>

## ReverseString 예제 (문자열 거꾸로 만들기)

```java
import java.util.Scanner;
public class ReverseString{
    public static void main(String[] args)
    {
		String str;			// 입력받는 문자열
		int length;		// 문자열의 길이
		char ch;			// 마지막 문자
		String outputStr = "";	// 출력 문자열

		// Scanner 객체를 생성하고 변수 scan이 그 객체를 가리키게 한다
		Scanner scan01 = new Scanner(System.in);

		// 문자열을 입력받는다
		System.out.print("문자열을 입력하세요: ");
		str = scan01.nextLine();

    // 입력 문자열을 출력한다
		System.out.println("입력하신 문자는 '" + str +"' 입니다." );

		// 문자열의 길이를 구한다
		length = str.length();
		System.out.println("'" + str + "'의 길이는 "+ length + "입니다.");

		// 반복문을 이용해 뒤에서부터 하나씩 꺼내서 outputStr에 추가
		for(int i = 1; i <= length; i++ ) {
			ch = str.charAt(length-i);
			outputStr += ch;
		}
		System.out.println("거꾸로하면 '" + outputStr + "' 입니다!");
    }
}
```
