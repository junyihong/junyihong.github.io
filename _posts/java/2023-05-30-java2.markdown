---
permalink: /java/java2
title: "JAVA - 2"
categories:
  - java
tags:
  - java
  - eclipse
toc: true
toc_sticky: true
toc_label: "JAVA - 2"
---

![img](/images/java/java.jpg)

# JAVA 02

### Exercise1 - 약수 구하기

```java

// 148의 약수를 구하라.
//* 약수: 어떤 수를 나누어떨어지게 하는 수
//   예) 4의 약수: 1, 2, 4
// 분석
// 먼저 소스로 구현하기 전에 약수의 개념에 대해 알아야 한다.
// 약수는 어떤 수를 나누어 떨어지게 하는 수다.
// 4의 약수를 구하는 과정을 살펴보면 1에서 4 사이의 자연수가 4로 나누어 떨어지는지 확인해보면 된다.
// 그런데 4보다 큰수는 4의 약수가 절대로 될 수 없다.
// 148까지 순차적으로 증가된다.
import java.util.Scanner;
public class Exercise1 {	// for...if문 사용
public static void main(String[] args) {
	Scanner scan01 = new Scanner(System.in);
	System.out.println("약수를 구할 숫자를 입력하세요. ");
	int num = scan01.nextInt();
	String exerciseStr = " ";
	for(int i = 1; i <= num; i++) {
		if (num % i == 0) {
			exerciseStr += (i + ", ");
		}
	}
	System.out.println(exerciseStr);
}
}
```

1. `Scanner` 클래스를 사용하여 사용자로부터 숫자를 입력받습니다.
2. 입력받은 숫자를 변수 `num`에 저장합니다.
3. 변수 `exerciseStr`을 초기화하고, 약수를 저장할 문자열로 사용합니다.
4. `for` 루프를 사용하여 1부터 `num`까지의 숫자를 반복합니다.
5. `if` 문을 사용하여 현재 반복 중인 숫자(i)가 `num`의 약수인지 확인합니다. 약수인 경우에만 `if` 문 내부의 코드를 실행합니다.
6. `exerciseStr` 문자열에 현재 약수인 숫자(i)를 추가합니다.
7. `for` 루프가 종료되면 `exerciseStr`에 저장된 약수들을 출력합니다.

<br/>
<br/>
### Exercise2 - 공약수 구하기

```java
import java.util.Scanner;

public class Exercise2 {
// 두 수 150, 300의 공약수를 구하라.
// * 공약수 : 두 수를 공통으로 나누어떨어지게 하는 수
// 예 ) 4, 6의 공약수 : 1, 2
// 분석 : 4와 6중 작은 수인 4보다 큰 수는 두 수의 공약수가 될 수 없다.
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

        System.out.println("첫 번째 숫자를 입력하세요: ");
        int num1 = scanner.nextInt();

        System.out.println("두 번째 숫자를 입력하세요: ");
        int num2 = scanner.nextInt();

        String commonFactors = "";
        for (int i = 1; i <= num1; i++) {
            if (num1 % i == 0 && num2 % i == 0) {
                commonFactors += (i + ", ");
            }
        }

        if (commonFactors.isEmpty()) {
            System.out.println("공약수가 없습니다.");
        } else {
            System.out.println("공약수: " + commonFactors);
        }
    }
}
```

1. `Scanner` 클래스를 사용해 사용자로부터 숫자 두개를 입력습니다.
2. 변수 `commonFactors`를 초기화하고, 공약수를 저장할 문자열로 사용합니다.
3. `for` 루프를 사용하여 1부터 `num1`까지의 숫자를 반복합니다.
4. `if` 문을 사용하여 현재 반복 중인 숫자(i)가 `num1`과 `num2`의 모두의 약수인지 확인합니다. 모두의 약수인 경우에만 `if` 문 내부의 코드를 실행합니다.
5. `commonFactors` 문자열에 현재 공약수인 숫자(i)를 추가합니다.
6. `for` 루프가 종료되면 `commonFactors`에 저장된 공약수들을 출력합니다.

<br/>
### Exercise3 - n 구하기

1+3+5+7+9+...+n 의값이 최초로 1,000 이상이 되는 n의 값과 그 수까지의 합을 구하라.

```java
public class Exercise3 {

// 구현 방법
// 1. 1부터 홀수의 합을 저장한다.
// 2. 홀수의 합이 1000 이상인지를 체크한다.
// 3. 1000이상이면 마지막으로 더한 홀수와 그 홀수까지의 합을 출력한 후 종료한다.
// 4. 1000이상이 아니면 그 다음 홀수를 이용해서 다시 1번 과정을 반복한다.
	public static void main(String[] args) { // while...if

		int num = 1;
		int sum = 0;
		while(true) {
			sum += num;
			if(sum >= 1000) {
				break;
			} else {
				num += 2;
				System.out.println(num);
			}
		}
		System.out.println("1에서" + num + "까지의 홀수의 합은 " + sum);
	}
}
```

1. 변수 `num`과 `sum`을 초기화 합니다.
2. `while` 루프를 사용하여 합이 1000 이상이 될 때까지 반복합니다.
3. `sum`에 현재의 홀수 `num`을 더합니다.
4. 합이 1000 이상인지 확인합니다. 만약 그렇다면, `break` 문을 사용하여 반복문을 종료합니다.
5. 합이 1000 이상이 아니라면, 다음 홀수를 이용하여 `num`을 업데이트하고 출력합니다.
6. 반복문이 종료되면, 1에서 `num`까지의 홀수의 합인 `sum`을 출력합니다.

<br/>
### Exercise4 - 소수 합성수 구분하기

```java
import java.util.Scanner;

public class Exercise4 {
// 자연수 n이 소수인지 판별하라.
// *소수 : 1과 자기 자신만으로 나누어 떨어지는 수
//	ex) 3의 약수 : 1, 3
//		4의 약수 : 1, 2, 4  -> 합성수
//	1. 143의 약수의 개수를 구한다.
//	2. 약수의 개수가 두개 인지 확인한다.
//	3. 약수의 개수가 두 개이면 소수이고, 아니면 합성수이다.

	public static void main(String[] args) {
		Scanner scan01 = new Scanner(System.in);
		System.out.println("약수를 구할 숫자를 입력하세요. ");
		int num = scan01.nextInt();
		int count = 0;

		for(int i = 1; i <= num; i++) {
			if (num % i == 0) {
				System.out.println("약수 : " + i);
				count++;
			}
		}

		System.out.println(num + "의 약수의 개수 : " + count);

		if(count == 2) {
			System.out.println(num + " 은 소수입니다.");
		} else {
			System.out.println(num + "은 합성수입니다.");
		}
	}

}
```

1. `Scanner` 클래스를 사용하여 사용자로부터 숫자(num)를 입력받습니다.
2. 변수 `count`를 초기화하고, 약수의 개수를 저장할 변수로 사용합니다.
3. `for` 루프를 사용하여 1부터 `num`까지의 숫자를 반복합니다.
4. `if` 문을 사용하여 현재 반복 중인 숫자(i)가 `num`의 약수인지 확인합니다. 약수인 경우에만 `if` 문 내부의 코드를 실행합니다.
5. 약수인 숫자(i)를 출력하고, 약수의 개수(`count`)를 증가시킵니다.
6. `for` 루프가 종료되면, `num`의 약수의 개수를 출력합니다.
7. 약수의 개수(`count`)가 2인지 확인합니다. 2개일 경우 소수이고, 그 외의 경우에는 합성수입니다.
8. 소수인지 합성수인지에 따라 결과를 출력합니다.

<br/>
### Exercise5 - n번째 소수 출력하기

자연수 중에서 20번째 소수를 출력하라

```java
public class Exercise5 {
// 분석
// 자연수 중에서 제일 작은 소수는 2다. 그리고 3, 5, 7 ... 이런 방식으로
// 자연수의 소수는 무한하다. 따라서 자연수에서 20번째 소수도 반드시 존재한다.
	// 구현방법
	// 1. 자연수 2부터 소수인지를 판별한다. (각 자연수의 약수의 개수를 구한다.)
	// 2. 소수이면 소수의 순서를 기록한다.
	// 3. 순서가 20이면 그 소수를 출력한 후 종료한다.
	// 4. 순서가 20이 아니면 자연수를 1 증가시킨 후 1번 과정을 반복한다.
	public static void main(String[] args) {	// while...for...if
		int num = 2;
		int count = 0;
		int order = 0;

		while (true) {	// 1. num의 약수의 개수를 구한다.

			for(int i = 1; i <= num; i++) {
				if (num % i == 0) {
					count++;
					// 약수의 개수만큼 count를 올리고
				}
			}

			if(count == 2)
				order += 1;
			// count가 두개이면, 즉 약수가 두개이면 order를 하나 올린다.
			if(order == 20)
				break;
			// order가 20 이면 while문 종료
			else
				num++;
				count = 0;
			// order가 20이 아니면 num을 올리고 카운트를 초기화해준다.
			System.out.println("오더 : " + order);
			System.out.println("현재숫자 : " + num);
		}
		// 2. 약수의 개수가 2이면 order를 1 증가시킨다.
		// 3. order가 20이면 while문을 종료하고, 아니면 num을 1 증가시킨 후 num에 대해 반복한다.
		System.out.println("자연수에서 " + order + "번째 소수는 " + num + " 입니다.");
	}
}
```

1. 변수 `num`을 2로 초기화합니다. `num`은 소수를 판별할 자연수를 나타냅니다.
2. 변수 `count`를 0으로 초기화합니다. `count`는 현재 `num`의 약수의 개수를 나타냅니다.
3. 변수 `order`를 0으로 초기화합니다. `order`는 소수의 순서를 나타냅니다.
4. 무한 루프를 사용하여 소수를 찾습니다.
5. `for` 루프를 사용하여 1부터 `num`까지의 숫자를 반복하면서 약수의 개수를 구합니다.
6. `num`을 i로 나눈 나머지가 0인 경우, `count`를 증가시킵니다.
7. `count`가 2인 경우, 즉 약수의 개수가 2개인 경우에만 `order`를 1 증가시킵니다.
8. `order`가 20이 되면 무한 루프를 종료합니다.
9. `order`가 20이 아니라면 `num`을 1 증가시키고, `count`를 0으로 초기화한 후 다시 반복합니다.
10. 마지막으로, 20번째 소수인 `num`을 출력합니다.

<br/>
### 주차요금 계산하기

```java
import java.util.Scanner;

public class CalParkingFree {
	// 주차 시간이 주어지면 주차요금을 계산한다.
	// @입력 매개변수들:
	// ptime - 주차시간
	// @반환 값: 주차요금
	static double calculateFee(double ptime)
	{
		double fee = 0.0;

		if (ptime > 0.0) {
			if (ptime <= 1.0)
				fee = 1000;
			else {
				fee = 1000 + Math.ceil(ptime - 1.0) * 500;
				if (fee > 10000) fee = 10000;
			}
		} else  {
			ptime = ptime + 24.0;
			fee = 1000 + Math.ceil(ptime - 1.0) * 500;

		}
		System.out.println("주차시간 : " + ptime + "(시간)");
		return fee;
	}
	public static void main(String[] args) {
		// 주차장에 들어온 시간, 나간 시간과 주차요금을 저장하는 변수들을 선언한다.
		double entrytime;
		double exittime;
		double fee;

		// 반복문의 계속 수행 여부를 나타내는 변수를 선언한다.
		String flag;
		// 키보드로부터 입력하는 데이터를 읽기 위한 Scanner 객체를 만든다.
		Scanner scan = new Scanner(System.in);
		// 사용자가 계속하기를 원하는 동안 주차장에 들어온 시간과 나간 시간을 입력받아
		// 주차요금을 계산한다.
		do {
			// 주차장에 들어온 시간과 나간 시간을 입력하라고 요청한다.
			System.out.print("들어온 시간을 입력하세요: (HHmm 형식) \t");
			entrytime = scan.nextDouble() / 100;
			System.out.print("나간 시간을 입력하세요: (HHmm 형식) \t");
			exittime = scan.nextDouble() / 100;
			// 주차요금을 계산하고 출력한다.
			double ptime = exittime - entrytime; // 일단 대충 씀
			fee = calculateFee(ptime);
			System.out.println("주차요금 : " + fee +"(원)");
			// 사용자가 계속하기를 원하는 지를 예(y) 혹은 아니오(n)로 입력하라고 요청.
			// 그리고 입력된 값을 읽는다.
			System.out.println("계속하시겠습니까?");
	        flag = scan.next();
		} while (flag.equalsIgnoreCase("y"));
	}
}
```

1. `calculateFee` 함수는 주차 시간을 매개변수로 받아 주차 요금을 계산하는 함수입니다.
2. 변수 `ptime`은 주차 시간을 나타냅니다.
3. 주차 시간이 0보다 큰 경우, 주차 요금을 계산합니다.
4. 주차 시간이 1시간 이하인 경우, 요금은 1000원입니다.
5. 주차 시간이 1시간을 초과하는 경우, 추가 요금을 계산하여 총 요금을 구합니다.
6. 추가 요금은 (주차 시간 - 1)을 올림한 값에 500을 곱한 것입니다.
7. 요금이 10000원을 초과하는 경우, 최대 요금은 10000원으로 제한합니다.
8. 주차 시간이 0보다 작은 경우, 24시간을 더한 후 주차 요금을 계산합니다.
9. 계산된 주차 요금을 출력하고 반환합니다.
10. `main` 함수에서는 주차장에 들어온 시간과 나간 시간, 주차 요금을 저장하는 변수들을 선언합니다.
11. 반복문을 사용하여 사용자가 계속하기를 원하는 동안 주차 시간을 입력받고, 주차 요금을 계산합니다.
12. 주차 시간은 "HHmm" 형식으로 입력받으며, 입력받은 값을 100으로 나누어 시간 형식으로 변환합니다.
13. `calculateFee` 함수를 호출하여 주차 요금을 계산하고 출력합니다.
14. 사용자에게 계속하기 여부를 묻고, "y" 또는 "n"으로 입력받습니다.
15. 사용자가 "y"를 입력한 경우 반복문을 계속 수행합니다.
16. 사용자가 "n"을 입력한 경우 반복문을 종료합니다.
